# 동시요청 - 멀티 쓰레드

백엔드 개발자에게 제일 중요하다

- 개념 정리를 못하면 트래픽이 많은 커널 때 어떻게 해결해야 하는지 모름

기본개념

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/fd062363-9d35-49c3-87c3-a562e2207005/8f36d200-8ead-4112-983f-eb1b05d4f1fd/Untitled.png)

웹브라우저에서 요청을 하면 WAS에서 응답.

요청을 하면 TCP,IP 커넥션 연결

그리고 서블릿 호출함.

서블릿은 누가 호출하냐?(중요함)

쓰레드가 호출함

### 쓰레드

- 애플리케이션 코드를 하나하나 순차적으로 실행하는 것을 쓰레드라한다.
- 자바 메인 메서드를 처음 실행하면 main이라는 이름의 쓰레드가 실행
- 쓰레드가 없다면 자바애플리케이션 실행이 불가능
- 쓰레드는 한번에 하나의 코드 라인만 수행
- 동시 처리가 필요하면 쓰레드를 추가로 생성

### 단일 요청 - 쓰레드 하나 사용

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/fd062363-9d35-49c3-87c3-a562e2207005/d33ff6e7-ee9e-4692-b89a-eaffc0a8eab0/Untitled.png)

요청이 오면 쓰레드를 할당하고 쓰레드가 서블릿을 호출한다.

### 다중 요청 - 쓰레드 하나  사용

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/fd062363-9d35-49c3-87c3-a562e2207005/7d9e4568-b6a6-4ef1-b7c1-528f34642b09/Untitled.png)

위 상황에서 발생하는 문제는 둘다 오류 발생

### 해결책은 새로운 쓰레드 생성

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/fd062363-9d35-49c3-87c3-a562e2207005/980c9c8e-7841-446b-97dd-1c1b2605a319/Untitled.png)

요청이 올때마다 쓰레드 생성 - 종료 후 쓰레드 날리기.(실제로는 이렇게 개발안함)

## 요청마다 쓰레드 생성의 장단점

### 장점

- 동시 요청을 처리할 수 있다.
- 리소스(CPU,메모리)가 허용할 때 까지 처리가능
- 하나의 쓰레드가 지연 되어도, 나머지 쓰레드는 정상 동작한다.

### 단점

- 쓰레드의 생성비용은 매우 비싸다.
    - 고객의 요청이 올때마다 쓰레드를 생성하면, 응답 속도가 늦어진다.
- 쓰레드는 컨텍스트 스위칭 비용이 발생한다.
- 쓰레드 생성에 제한이 없다.
    - 고객 요청이 너무 많이 오면, CPU, 메모리 임계점을 넘어서 서버가 죽을 수 있다.

## 해결방법(쓰레드 )

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/fd062363-9d35-49c3-87c3-a562e2207005/193e670e-cf17-49c6-8aa4-6eedc337947b/Untitled.png)

요청이 끝나면 사용 했던 쓰레드는 쓰레드 풀에 다시 놓는다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/fd062363-9d35-49c3-87c3-a562e2207005/fa24b952-d3dc-42c2-be58-fec3e29a9e31/Untitled.png)

쓰레드가 전부 사용중이면 요청을 거절하거나 대기시킬 수 있다.

### 특징

- 필요한 쓰레드를 쓰레드 풀에 보관하고 관리한다.
- 쓰레드 풀에 생성 가능한 쓰레드의 최대치를 관리한다. 톰캣은 최대 200개 기본 설정(변경가능)

### 사용

- 쓰레드가 필요하면, 이미 생성되어있는 스레드를 쓰레드 풀에서 꺼내서 사용한다.
- 사용을 종료하면 쓰레드 풀에 해당 쓰레드를 반납한다.
- 최대 쓰레드가 모두 사용중이어서 쓰레드 풀에 쓰레드가 없으면?
    - 기다리는 요청은 거절하거나 특정 숫자만큼만 대기하도록 설정할 수 있다.

### 장점

- 쓰레드가 미리 생성되어 있으므로, 쓰레드를 생성하고 종료하는 비용(CPU)이 절약되고, 응답시간이 빠르다.
- 생성 가능한 쓰레드의 최대치가 있으므로 너무 많은 요청이 들어와도 기존 요청은 안전하게 처리할 수 있다.

### 쓰레드 풀(실무 팁)

- WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수이다.
- 이 값을 너무 낮게 설정하면
    - 동시 요청이 많으면, 서버 리소스는 여유롭지만, 클라이언트는 금방 응답 지연
- 이 값을 너무 높게 설정하면?
    - 동시 요청이 많으면, CPU, 메모리 리소스 임계점 초과로 서버 다운
- 장애 발생시
    - 클라우드면 일단 서버부터 늘리고,이후에 튜닝
    - 클라우드가 아니면 열심히 튜닝

_정적값을 찾아서 설정하는게 중요하다

### 적정 숫자

- 적정 숫자는 어떻게 찾는지
- 애플리케이션 로직의 복잡도, CPU, 메모리, IO 리소스 상황에 따라 몯 ㅜ다름
- 성능 테스트
    - 최대한 실제 서비스와 유사하게 성능 테스트 시도
    - 툴 : 아파치ab, 제이미터, nGrinder

## WAS의 멀치 쓰레드 지원(핵심)

- 멀티 쓰레드에 대한 부분은 WAS가 처리
- 개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 됨
- 개발자는 마치 싱글 쓰레드 프로그래밍을 하듯이 편리하게 소스 코드를 개발
- 멀티 쓰레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용
    - 공유변수, 멤버 변수가 공유되기 때문에 조심하기